//============================================================================
// Project	   : uORF
// Name        : main.cpp
// Author      : gnewcomb
// Version     : 0.0.0
// Copyright   : Copyright 2014 University of Nebraska-Lincoln
// Description : Hello World in C++, Ansi-style
//============================================================================
//
//  Revision History
//      v0.0.0 - 2014/02/06 - Garin Newcomb
//          Initial creation of file
//
//    	Appl Version at Last File Update::  v0.0.x - 2014/06/05 - Garin Newcomb
//      	[Note:  until program released, all files tracking with program revision level -- see "version.h" file]
//
//==============================================================================


////////////////////////////////////////////////////////////////////////////////
//
//  Table of Contents -- Source (.cpp) File
//      (Note:  (*) indicates that the section is not present in this file)
//
//      A. Include Statements, Preprocessor Directives, and Related
//      B. Global Variable Declarations (including those in other files)
//		C. Main
//
////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// A. Include Statements, Preprocessor Directives, and Related
//
////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <windows.h>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>   	// For sort()

using namespace std;

// Project-specific header files:  definitions and related information
#include "defs__general.h"
#include "defs__appl_parameters.h"
#include "version.h"

// Project-specific header files:  support functions and related
#include "support__file_io.h"
#include "uORF__compile.h"
#include "support__general.h"
#include "support__bioinformatics.h"

////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// B. Global Variable Declarations (including those in other files)
//
////////////////////////////////////////////////////////////////////////////////

extern TErrors Errors;						// Stores information about errors and responds to them in several ways
TProgram_Log Program_Log;

////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// C. Main
//
////////////////////////////////////////////////////////////////////////////////

int main()
{
	// ------------------------------
	// Read in and parse the S. cerevisiae GFF
	TFasta_Content * S_Cerevisiae_Chrom = new TFasta_Content( PATH_S_CEREVISIA_FASTA_FOLDER, S_CEREVISIAE_GFF_FILE_NAME );
	
	if( S_Cerevisiae_Chrom->get_contents_from_gff() )
	{
		Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
	}
	// ------------------------------



	////////////////////////////////////////////////////////////////////////////////
	// Alternative Program Flows

	// ------------------------------
	// Generate files containing a simplified hierarchy of GO terms
	#ifdef GENERATE_GO_HIERARCHY
		generate_simple_GO_hierarchy();
	#endif
	// ------------------------------



	// ------------------------------
	// If desired, search for certain Amino Acid or DNA sequences
	#ifdef AA_SEQ_TO_FIND
		ostringstream AA_find_oss;
		for( unsigned int i = 0; i < S_Cerevisiae_Chrom->sequence.size(); i++ )
		{
			unsigned int first_inst = find_AA_seq( S_Cerevisiae_Chrom->sequence[i], AA_SEQ_TO_FIND, 1);
			AA_find_oss << "AA_seq_pos in chrom " << i << ": " << ( first_inst == S_Cerevisiae_Chrom->sequence[i].size() ? 0 : first_inst ) << "\n";
		}
		output_text_line( AA_find_oss.str() );
	#endif

	
	#ifdef DNA_SEQ_TO_CONVERT
		output_text_line( (string)"AA seq: " + convert_to_AA_seq( DNA_SEQ_TO_CONVERT ) );
	#endif

	
	#ifdef REQUEST_SEL_SEQUENCES
		request_sel_sequence( S_Cerevisiae_Chrom->sequence );
	#endif
	// ------------------------------
	 
	////////////////////////////////////////////////////////////////////////////////



	// ------------------------------
	// Compile the list of uORFs
	vector< TORF_Data > * ORF_Data = new vector <TORF_Data>;

	if( LIST_COMPILE_SOURCE == FROM_CURRENT_LIST )
	{
		vector <TGO_Annotation> * All_GO_Annotations = new vector <TGO_Annotation>;
		parse_GO_hierarchy( All_GO_Annotations );
		parse_uORFs_from_list( ORF_Data, S_Cerevisiae_Chrom->get_gff_annotations(), *All_GO_Annotations, INPUT_FILE_NAMING_METHOD );
		delete All_GO_Annotations;
	}
	else/*( LIST_COMPILE_SOURCE == FROM_DATA_SOURCES )*/
	{
		compile_uORF_list( *S_Cerevisiae_Chrom, ORF_Data );
	}
	// ------------------------------


	
	// ------------------------------
	// Process the data and print to CSV
	
	// Even if sorting by GO terms, initially sort by position (to save time when pulling GO terms)
	if( ORF_SORTING_METHOD != DONT_SORT_ORFS )
	{
		sort( ORF_Data->begin(), ORF_Data->end(), compare_ORF_positions );

		combine_uORFs_by_gene( ORF_Data );

		for( unsigned int i = 0; i < ORF_Data->size(); i++ )
		{
			ORF_Data->at( i ).sort_uORFs();
		}

		delete_duplicate_uORFs( ORF_Data, SELECT_uORFS_TO_DELETE );



		if( ORF_SORTING_METHOD == SORT_ORFS_BY_GO_TERMS )
		{
			vector <TGO_Annotation> * All_GO_Annotations = new vector <TGO_Annotation>;
			parse_GO_hierarchy( All_GO_Annotations );
			add_GO_info_to_ORFs( ORF_Data, *All_GO_Annotations );

			sort_ORFs_by_GO_terms( GO_NAMESPACE_TO_SORT_BY, ORF_Data, *All_GO_Annotations );
			delete All_GO_Annotations;
		}
	}


	if( LIST_COMPILE_SOURCE == FROM_DATA_SOURCES )
	{
		// Extract the start contexts for each of the genes (done after duplicate genes have been removed)
		for( unsigned int i = 0; i < ORF_Data->size(); i++ )
		{
			if( ORF_Data->at( i ).get_gene_start_context( S_Cerevisiae_Chrom->sequence[ ORF_Data->at( i ).chrom_num - 1 ] ) )
			{
				Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
			}
		}


		for( unsigned int i = 0; i < ORF_Data->size(); i++ )
		{
			ORF_Data->at( i ).calculate_AUGCAI_values();
		}
	}



	if( write_uORFs_to_csv( *ORF_Data, uORF_COLUMN_SELECTION_TYPE, OUTPUT_FILE_NAMING_METHOD ) )
	{
		Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
	}

	
	#ifdef WRITE_GENE_LIST_TO_FILE
		if( write_gene_list_to_file( *ORF_Data ) )
		{
			Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
		}
	#endif
	// ------------------------------


	delete S_Cerevisiae_Chrom;
	delete ORF_Data;

	Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );

	return SUCCESSFUL;
}

////////////////////////////////////////////////////////////////////////////////



