//============================================================================
// Project	   : uORF
// Name        : main.cpp
// Author      : Garin Newcomb
// Email       : gpnewcomb@live.com   
// Version     : See "Revision History" below
// Copyright   : Copyright 2014 University of Nebraska-Lincoln
// Description : Hello World in C++, Ansi-style
//============================================================================
//
//  Revision History
//      v0.0.0 - 2014/02/06 - Garin Newcomb
//          Initial creation of file
//
//    	Appl Version at Last File Update::  v0.0.x - 2014/06/05 - Garin Newcomb
//      	[Note:  until program released, all files tracking with program revision level -- see "version.h" file]
//
//==============================================================================


////////////////////////////////////////////////////////////////////////////////
//
//  Table of Contents -- Source (.cpp) File
//      (Note:  (*) indicates that the section is not present in this file)
//
//      A. Include Statements, Preprocessor Directives, and Related
//      B. Global Variable Declarations (including those in other files)
//		C. Main
//
////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// A. Include Statements, Preprocessor Directives, and Related
//
////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <windows.h>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>   	// For sort()

using namespace std;

// Project-specific header files:  definitions and related information
#include "defs__general.h"
#include "defs__appl_parameters.h"
#include "version.h"

// Project-specific header files:  support functions and related
#include "support__file_io.h"
#include "uORF__compile.h"
#include "uORF__process.h"
#include "support__general.h"
#include "support__bioinformatics.h"

////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// B. Global Variable Declarations (including those in other files)
//
////////////////////////////////////////////////////////////////////////////////

extern TErrors Errors;						// Stores information about errors and responds to them in several ways
TProgram_Log Program_Log;

////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////
//
// C. Main
//
////////////////////////////////////////////////////////////////////////////////

int main()
{
	////////////////////////////////////////////////////////////////////////////////
	// Alternative Program Flows - Before Reading in Yeast Genome
	
	// ------------------------------
	// Generate files containing a simplified hierarchy of GO terms
	#ifdef GENERATE_GO_HIERARCHY
		generate_simple_GO_hierarchy();
		return Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );
	#endif
	// ------------------------------
	
	
	
	// ------------------------------
	// Convert a DNA sequence to its translated Amino Acid sequence
	#ifdef CONVERT_DNA_SEQ_TO_AA
		string DNA_seq = prompt_for_input<string>( "Input DNA sequence to convert to AA sequence: " );
		output_text_line( "" );

		output_text_line( (string)"AA seq: " + convert_to_AA_seq( DNA_seq ) );
		return Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );
	#endif
	// ------------------------------
	
	////////////////////////////////////////////////////////////////////////////////
	
	
	
	// ------------------------------
	// Read in and parse the S. cerevisiae GFF
	TFasta_Content * S_Cerevisiae_Chrom = new TFasta_Content( PATH_S_CEREVISIA_FASTA_FOLDER, S_CEREVISIAE_GFF_FILE_NAME );
	
	if( S_Cerevisiae_Chrom->get_contents_from_gff() )
	{
		Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
	}
	// ------------------------------



	////////////////////////////////////////////////////////////////////////////////
	// Alternative Program Flows - After Reading in Yeast Genome

	// ------------------------------
	// If desired, search for an Amino Acid sequence
	#ifdef SEARCH_FOR_AA_SEQ
		ostringstream AA_find_oss;
		string AA_seq = prompt_for_input<string>( "Input AA sequence to search for: " );
		output_text_line( "" );

		for( unsigned int i = 0; i < S_Cerevisiae_Chrom->sequence.size(); i++ )
		{
			unsigned int first_inst = find_AA_seq( S_Cerevisiae_Chrom->sequence[i], AA_seq, 1);

			AA_find_oss << "AA_seq_pos in chrom " << i << ": " << ( i < 10 ? " " : "" )
						<< ( first_inst == S_Cerevisiae_Chrom->sequence[i].size() ? 0 : first_inst ) << "\n";
		}
		output_text_line( AA_find_oss.str() );
		return Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );
	#endif
	// ------------------------------
	
	
	
	// ------------------------------
	// Extract a specified DNA sequence
	#ifdef REQUEST_SEL_SEQUENCES
		request_sel_sequence( S_Cerevisiae_Chrom->sequence );
		return Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );
	#endif
	// ------------------------------
	 
	////////////////////////////////////////////////////////////////////////////////



	// ------------------------------
	// Compile the list of uORFs and write to CSV
	vector< TORF_Data > * ORF_Data = new vector <TORF_Data>;

	compile_uORF_list( *S_Cerevisiae_Chrom, ORF_Data );
	sort_and_consolidate( ORF_Data );
	determine_ORF_and_uORF_characteristics( *S_Cerevisiae_Chrom, ORF_Data );
	write_uORFs_to_csv( *ORF_Data, uORF_COLUMN_SELECTION_TYPE, OUTPUT_FILE_NAMING_METHOD );
	// ------------------------------
	
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Alternative Program Flows - After uORF list compilation/processing
	
	// ------------------------------
	#ifdef WRITE_GENE_LIST_TO_FILE
		if( write_gene_list_to_file( *ORF_Data ) )
		{
			Errors.handle_error( FATAL, "", __FILE__, __LINE__ );
		}
	#endif
	// ------------------------------
	
	////////////////////////////////////////////////////////////////////////////////


	
	// ------------------------------
	// Dynamically allocated memory deletion
	delete S_Cerevisiae_Chrom;
	delete ORF_Data;
	// ------------------------------


	return Program_Log.print_log_to_file( PATH_PROGRAM_LOG_FOLDER, uORF_APPL_VERSION_NUMBER, SUCCESSFUL );
}

////////////////////////////////////////////////////////////////////////////////



